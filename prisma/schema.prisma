// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "cockroachdb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    dog           DogProfile?
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model DogProfile {
    id            BigInt         @id @default(autoincrement())
    user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String         @unique
    profilePic    String?
    name          String
    sex           String
    age           Int
    bio           String         @db.String(255)
    posts         Post[]
    traitsId      String?        @unique
    traits        Traits?
    city          String?
    dogPreference DogPreference?
}

model DogPreference {
    id            String     @id @default(uuid())
    lowerAgeLimit Int
    upperAgeLimit Int
    gender        String
    dog           DogProfile @relation(fields: [dogProfileId], references: [id])
    dogProfileId  BigInt     @unique
}

model Traits {
    id           String      @id @default(uuid())
    species      String?
    size         String?
    weight       Float?
    children     String?
    neutered     String?
    energyLevel  Int?
    dogProfile   DogProfile? @relation(fields: [dogProfileId], references: [id])
    dogProfileId BigInt?     @unique
}

model Post {
    id       BigInt  @id @default(autoincrement())
    prompt   Prompt  @relation(fields: [promptId], references: [id])
    promptId BigInt
    image    String?
    answer   String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    DogProfile   DogProfile? @relation(fields: [dogProfileId], references: [id])
    dogProfileId BigInt?

    @@index([dogProfileId])
    @@index([promptId])
}

model Prompt {
    id     BigInt @id @default(autoincrement())
    prompt String
    posts  Post[]
}
